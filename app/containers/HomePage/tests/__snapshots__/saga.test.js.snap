// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createRoute Saga When it requests the data successfully should put routeLoaded action and call getRoute 1`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`createRoute Saga When it requests the data successfully should put routeLoaded action and call getRoute 2`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/mock/route/success",
      Object {
        "body": "{\\"origin\\":\\"starting_location\\",\\"destination\\":\\"drop_off_point\\"}",
        "headers": Object {
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`createRoute Saga When it responses errors should call routeLoadingError action 1`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`createRoute Saga When it responses errors should call routeLoadingError action 2`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/mock/route/success",
      Object {
        "body": "{\\"origin\\":\\"starting_location\\",\\"destination\\":\\"drop_off_point\\"}",
        "headers": Object {
          "Content-Type": "application/json",
        },
        "method": "POST",
      },
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'failure' in response should put routeLoadingError 1`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'failure' in response should put routeLoadingError 2`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'failure' in response should put routeLoadingError 3`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should retry call and put routeLoaded if status === 'success' in new response 1`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should retry call and put routeLoaded if status === 'success' in new response 2`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should retry call and put routeLoaded if status === 'success' in new response 3`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should retry call and put routeLoaded if status === 'success' in new response 4`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 1`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 2`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 3`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 4`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 5`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 6`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 7`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 8`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 9`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 10`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 11`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'in progress' in response should throw error if status === 'in progress' in all 10 attempt responses 12`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;

exports[`getRoute Saga When status === 'success' in response should put routeLoaded 1`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'success' in response should put routeLoaded 2`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [],
    "selector": [Function],
  },
  "type": "SELECT",
}
`;

exports[`getRoute Saga When status === 'success' in response should put routeLoaded 3`] = `
Object {
  "@@redux-saga/IO": true,
  "combinator": false,
  "payload": Object {
    "args": Array [
      "api.example.com/route/token",
    ],
    "context": null,
    "fn": [Function],
  },
  "type": "CALL",
}
`;
